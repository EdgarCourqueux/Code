import streamlit as st
from datetime import datetime, timedelta
from price_data import PriceData
from strategies.BuyAndHold import BuyAndHold
from strategies.Momentum import Momentum
from Indicateurs import Indicateurs
from strategies.data import DataDownloader
import pandas as pd
import plotly.express as px
import logging
from strategies.MinVariance import MinimumVariance

# Exemple de log
price_lib = PriceData()
indicateurs=Indicateurs()
data_downloader = DataDownloader()
# Charger le fichier des tickers et entreprises
TICKERS_DICT = price_lib.universe()

# Interface Streamlit
st.title("üìà Dashboard des Strat√©gies d'Investissement")

# Param√®tres de la strat√©gie
st.sidebar.header("Param√®tres de la strat√©gie")
strategie_choisie = st.sidebar.selectbox("S√©lectionner une Strat√©gie", ["BuyAndHold", "Momentum", "MinimumVariance"])

# Param√®tres d'entr√©e
montant_initial = st.sidebar.number_input("Montant initial (‚Ç¨)", min_value=100, max_value=100000, value=1000)

# T√©l√©charger les donn√©es historiques pour d√©terminer la date minimale
data = price_lib.prices(list(TICKERS_DICT.keys()))
date_min = data.index.min().date()

# Param√®tres sp√©cifiques aux strat√©gies
if strategie_choisie == "BuyAndHold":
    date_investissement = pd.to_datetime(
        st.sidebar.date_input("Date d'investissement", value=datetime(2023, 1, 1), min_value=date_min)
    )
    date_fin_investissement = pd.to_datetime(
        st.sidebar.date_input("Date de fin d'investissement", value=datetime.now().date(), min_value=date_investissement)
    )
else:  # Momentum
    date_investissement = pd.to_datetime(
        st.sidebar.date_input("Date de d√©but de la strat√©gie", value=datetime(2023, 1, 1), min_value=date_min)
    )
    date_fin_investissement = pd.to_datetime(
        st.sidebar.date_input("Date de fin de la strat√©gie", value=datetime.now().date(), min_value=date_investissement)
    )

# Validation explicite des dates
if date_investissement is None or date_fin_investissement is None:
    st.error("Veuillez s√©lectionner des dates valides pour la strat√©gie.")
    st.stop()

# S√©lection de plusieurs entreprises par leurs noms
entreprises_selectionnees = st.sidebar.multiselect(
    "S√©lectionner les Entreprises", list(TICKERS_DICT.values())
)

# Convertir les noms d'entreprises s√©lectionn√©s en tickers correspondants
tickers_selectionnes = [ticker for ticker, name in TICKERS_DICT.items() if name in entreprises_selectionnees]

# Param√®tres suppl√©mentaires pour la strat√©gie Momentum
if strategie_choisie == "Momentum" or strategie_choisie=="MinimumVariance":
    if tickers_selectionnes:
        max_assets = len(tickers_selectionnes)
        nombre_actifs = st.sidebar.number_input(
            "Nombre d'actifs √† s√©lectionner",
            min_value=1,
            max_value=max_assets,
            value=min(3, max_assets),  # La valeur par d√©faut ne d√©passe pas max_assets
        )
        periode_reroll = st.sidebar.number_input("P√©riode de r√©√©valuation (jours)", min_value=1, max_value=365, value=30)
        periode_historique = st.sidebar.number_input("P√©riode historique (jours)", min_value=1, max_value=365, value=90)
    else:
        st.sidebar.warning("Veuillez s√©lectionner au moins une entreprise pour configurer les param√®tres.")
else:
    nombre_actifs = None
    periode_reroll = None
    periode_historique = None

# Instancier la strat√©gie s√©lectionn√©e
strategie = None

def _charger_donnees(tickers_selectionnes, date_investissement, date_fin):
    data_dict = {}
    for ticker in tickers_selectionnes:
        try:
            data = data_downloader.download_data(ticker, date_investissement, date_fin)
            if not data.empty:
                data_dict[ticker] = data.reset_index()
            else:
                print(f"Aucune donn√©e disponible pour le ticker {ticker}.")
        except Exception as e:
            print(f"Erreur lors du t√©l√©chargement des donn√©es pour {ticker}: {e}")

    return data_dict

data_dict = _charger_donnees(tickers_selectionnes, date_investissement, date_fin_investissement)

if st.sidebar.button("Lancer l'analyse"):
    if strategie_choisie == "BuyAndHold" and tickers_selectionnes:
        logging.info(
            f"Lancement de la strat√©gie 'BuyAndHold' : {tickers_selectionnes} | {montant_initial} | {date_investissement} | {date_fin_investissement}"
        )
        strategie = BuyAndHold(montant_initial, date_investissement, tickers_selectionnes, date_fin_investissement)
    elif strategie_choisie == "Momentum" and tickers_selectionnes and nombre_actifs and periode_reroll and periode_historique:
        logging.info(
            f"Lancement de la strat√©gie 'Momentum' : {tickers_selectionnes} | {montant_initial} | {nombre_actifs} | {periode_reroll} | {periode_historique} | {date_investissement} | {date_fin_investissement}"
        )
        strategie = Momentum(
            montant_initial, tickers_selectionnes, nombre_actifs, periode_reroll, periode_historique, date_investissement, date_fin_investissement
        )
    elif strategie_choisie == "MinimumVariance" and tickers_selectionnes:
        logging.info(
            f"Lancement de la strat√©gie 'MinimumVariance' : {tickers_selectionnes} | {montant_initial} | {date_investissement} | {date_fin_investissement}"
        )
        strategie = MinimumVariance(
            montant_initial, tickers_selectionnes, nombre_actifs, periode_reroll, periode_historique, date_investissement, date_fin_investissement
        )
    try:
        # Ex√©cution de la strat√©gie
        performance_results = strategie.execute()

        # V√©rification que le r√©sultat est un dictionnaire structur√©
        if not isinstance(performance_results, dict):
            st.error("Les r√©sultats de la strat√©gie ne sont pas structur√©s correctement.")
        else:
            # Cr√©ation des onglets pour afficher les r√©sultats
            if strategie_choisie == "Momentum" or strategie_choisie=="MinimumVariance":
                tabs = st.tabs([
                    "R√©sum√© des Indicateurs",
                    "Graphique des Prix",
                    "Valeur du Portefeuille",
                    "Proportions",
                    "Matrice de Corr√©lation",
                    "Tableau R√©capitulatif",
                ])
            else:
                tabs = st.tabs([
                    "R√©sum√© des Indicateurs",
                    "Graphique des Prix",
                    "Valeur du Portefeuille",
                    "Proportions",
                    "Matrice de Corr√©lation",
                ])

            with tabs[0]:
                st.subheader("üìä R√©sum√© des Indicateurs")

                # Gains et Performance : Affichage direct
                st.markdown("### Gains et Performance")
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Gain Total (‚Ç¨)", f"{performance_results.get('gain_total', 0):,.2f}‚Ç¨")
                with col2:
                    st.metric("Pourcentage Gain Total (%)", f"{performance_results.get('pourcentage_gain_total', 0):.2f}%")
                with col3:
                    st.metric("Performance Annualis√©e (%)", f"{performance_results.get('performance_annualisee', 0):.2f}%")

                # Volatilit√©
                with st.expander("Volatilit√©"):
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("Volatilit√© Historique (%)", f"{performance_results.get('volatilite_historique', 0) * 100:.2f}%")
                    with col2:
                        st.metric("Volatilit√© EWMA (%)", f"{performance_results.get('ewma_volatility', 0) * 100:.2f}%")

                # Value at Risk (VaR)
                with st.expander("Value at Risk (VaR)"):
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("VaR Param√©trique (%)", f"{abs(performance_results.get('VaR Param√©trique', 0)) * 100:.2f}%")
                    with col2:
                        st.metric("VaR Historique (%)", f"{abs(performance_results.get('VaR Historique', 0)) * 100:.2f}%")
                    with col3:
                        st.metric("VaR Cornish-Fisher (%)", f"{abs(performance_results.get('VaR Cornish-Fisher', 0)) * 100:.2f}%")

                # Conditional VaR (CVaR)
                with st.expander("Conditional VaR (CVaR)"):
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("CVaR Param√©trique (%)", f"{abs(performance_results.get('CVaR Param√©trique', 0)) * 100:.2f}%")
                    with col2:
                        st.metric("CVaR Historique (%)", f"{abs(performance_results.get('CVaR Historique', 0)) * 100:.2f}%")
                    with col3:
                        st.metric("CVaR Cornish-Fisher (%)", f"{abs(performance_results.get('CVaR Cornish-Fisher', 0)) * 100:.2f}%")
            # Graphique des Prix
            with tabs[1]:
                st.subheader("üìà √âvolution des Prix Normalis√©s des Tickers")
                try:
                    fig_prices = indicateurs.afficher_graphique_interactif(
                        data_dict=data_dict,
                        tickers_selectionnes=tickers_selectionnes,
                        montant_initial=montant_initial,
                        date_investissement=date_investissement,
                        date_fin=date_fin_investissement,
                    )
                    st.plotly_chart(fig_prices)
                except Exception as e:
                    st.error(f"Erreur lors de la cr√©ation du graphique : {e}")

            # Valeur du Portefeuille 
            with tabs[2]:
                if strategie_choisie=="BuyAndHold":
                    st.subheader("üí∞ √âvolution de la Valeur du Portefeuille")
                    try:
                        fig = indicateurs._graphique_valeur_portefeuille(data_dict, montant_initial,tickers_selectionnes,date_investissement,date_fin_investissement)
                        st.plotly_chart(fig)
                    except Exception as e:
                        st.error(f"Erreur lors de l'affichage de l'image : {e}")
                elif strategie_choisie == "Momentum"or strategie_choisie=="MinimumVariance":
                    st.subheader("üí∞ √âvolution de la Valeur du Portefeuille")
                    try:
                        dates = performance_results.get("dates", [])
                        valeurs_portefeuille = performance_results.get("valeurs_portefeuille", [])
                        if dates and valeurs_portefeuille:
                            fig = Indicateurs.evolution_valeur_portefeuille(dates, valeurs_portefeuille)
                            st.plotly_chart(fig)
                        else:
                            st.error("Donn√©es insuffisantes pour afficher l'√©volution de la valeur du portefeuille.")
                    except Exception as e:
                        st.error(f"Erreur : {e}")

            # Proportions des Entreprises
            with tabs[3]:
                if strategie_choisie=="BuyAndHold":
                    st.subheader("üìä Proportions des Entreprises dans le Portefeuille")
                    try:
                        fig_prices = indicateurs._graphique_proportions(
                            data_dict=data_dict,
                            montant_initial=montant_initial,
                            tickers_selectionnes=tickers_selectionnes,
                            date_investissement=date_investissement,
                            date_fin=date_fin_investissement,
                        )
                        st.plotly_chart(fig_prices)
                    except Exception as e:
                        st.error(f"Erreur lors de l'affichage des proportions : {e}")
                elif strategie_choisie == "Momentum"or strategie_choisie=="MinimumVariance":
                    st.subheader("üìä Taux d'Apparition des Entreprises dans le Portefeuille")
                    try:
                        # R√©cup√©rer la r√©partition des actifs et calculer le taux d'apparition
                        repartition = performance_results.get("repartition")
                        if repartition is not None and not repartition.empty:
                            # Exclure la colonne "Date" si elle est pr√©sente
                            if "Date" in repartition.columns:
                                repartition_numeric = repartition.drop(columns=["Date"])
                            else:
                                repartition_numeric = repartition

                            # Remplacer les NaN par 0
                            repartition_numeric.fillna(0, inplace=True)

                            # Calculer le taux d'apparition
                            total_periods = repartition_numeric.shape[0]
                            taux_apparition = (repartition_numeric > 0).sum(axis=0) / total_periods * 100

                            # Tracer le graphique des taux d'apparition
                            fig = px.bar(
                                x=taux_apparition.index,
                                y=taux_apparition.values,
                                title="Taux d'Apparition des Actifs dans le Portefeuille",
                                labels={"x": "Actifs", "y": "Taux d'Apparition (%)"},
                                text_auto=".2f"
                            )
                            fig.update_layout(
                                xaxis_title="Actifs",
                                yaxis_title="Taux d'Apparition (%)",
                                showlegend=False
                            )
                            st.plotly_chart(fig)
                        else:
                            st.error("Donn√©es insuffisantes pour afficher le taux d'apparition.")
                    except Exception as e:
                        st.error(f"Erreur lors de l'analyse des proportions : {e}")

                    st.subheader("üìà R√©partition Dynamique du Portefeuille au Fil du Temps")
                    try:
                        if repartition is not None and not repartition.empty:
                            # V√©rifier et ajouter la colonne "Date" si elle n'existe pas
                            if "Date" not in repartition.columns:
                                repartition.reset_index(inplace=True)
                                repartition.rename(columns={"index": "Date"}, inplace=True)

                            # G√©n√©rer le graphique interactif de r√©partition
                            fig_repartition = px.area(
                                repartition.melt(id_vars="Date", var_name="Actif", value_name="Proportion"),
                                x="Date",
                                y="Proportion",
                                color="Actif",
                                title="R√©partition Dynamique du Portefeuille",
                                labels={"Proportion": "Proportion (%)", "Date": "Date", "Actif": "Actifs"}
                            )
                            fig_repartition.update_layout(
                                xaxis_title="Date",
                                yaxis_title="Proportion (%)",
                                hovermode="x unified"
                            )
                            st.plotly_chart(fig_repartition)
                        else:
                            st.error("Donn√©es insuffisantes pour afficher la r√©partition dynamique.")
                    except Exception as e:
                        st.error(f"Erreur lors de l'affichage de la r√©partition dynamique : {e}")

            # Matrice de Corr√©lation
            with tabs[4]:
                st.subheader("üîó Matrice de Corr√©lation des Entreprises")
                try:
                    # Calcul de la matrice de corr√©lation
                    correlation_matrix = indicateurs.matrice_correlation(data_dict,tickers_selectionnes,date_investissement,date_fin_investissement)
                    # Cr√©ation de la visualisation avec Plotly
                    fig_corr = px.imshow(
                        correlation_matrix,
                        text_auto=True,
                        color_continuous_scale="RdBu_r",
                        title="Matrice de Corr√©lation des Rendements Journaliers",
                    )
                    st.plotly_chart(fig_corr)
                except Exception as e:
                    st.error(f"Erreur lors de la cr√©ation de la matrice de corr√©lation : {e}")

                        
            if (strategie_choisie == "Momentum" or strategie_choisie=="MinimumVariance" ) and len(tabs) > 5:
                # Tableau R√©capitulatif
                with tabs[5]:
                    st.subheader("üìù Tableau R√©capitulatif des Investissements")
                    try:
                        # Initialisation du tableau r√©capitulatif
                        investment_summary = []

                        # R√©cup√©ration des donn√©es
                        dates = performance_results.get("dates", [])
                        valeurs_portefeuille = performance_results.get("valeurs_portefeuille", [])
                        actifs_selectionnes = performance_results.get("actifs_selectionnes", [])
                        valeurs_momentum = performance_results.get("valeurs_momentum", [])  # Assurez-vous que cette cl√© existe
                        performances_buy_and_hold = performance_results.get("performances_buy_and_hold", [])  # Performances en %

                        # V√©rification de la pr√©sence des donn√©es
                        if dates and valeurs_portefeuille and actifs_selectionnes and valeurs_momentum and performances_buy_and_hold:
                            for i in range(len(dates) - 1):
                                # Dates de d√©but et de fin
                                start_date = dates[i].date()
                                end_date = dates[i + 1].date()
                                portefeuille_value = valeurs_portefeuille[i + 1]
                                valeur_momentum = valeurs_momentum[i + 1] if i + 1 < len(valeurs_momentum) else None
                                performance_buy_and_hold = performances_buy_and_hold[i] if i < len(performances_buy_and_hold) else None

                                # Extraction des actifs s√©lectionn√©s pour cette p√©riode
                                actifs = actifs_selectionnes[i]["Actifs s√©lectionn√©s"] if i < len(actifs_selectionnes) else []

                                # Ajout au tableau r√©capitulatif
                                investment_summary.append({
                                    "Date de d√©but": start_date,
                                    "Date de fin": end_date,
                                    "Valeur cumulative du portefeuille (‚Ç¨)": portefeuille_value,
                                    "Performance Buy and Hold (%)": f"{performance_buy_and_hold:.2f} %" if performance_buy_and_hold is not None else "N/A",
                                    "Actifs s√©lectionn√©s": ", ".join(actifs)
                                })

                            # Cr√©ation d'un DataFrame
                            df_summary = pd.DataFrame(investment_summary)

                            # Affichage du tableau dans Streamlit
                            st.dataframe(df_summary)
                        else:
                            st.error("Donn√©es insuffisantes pour afficher le tableau r√©capitulatif.")
                    except Exception as e:
                        st.error(f"Erreur lors de la cr√©ation du tableau r√©capitulatif : {e}")

    except Exception as e:
        st.error(f"Erreur lors de l'ex√©cution de la strat√©gie : {e}")
